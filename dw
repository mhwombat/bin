#!/bin/bash
#: Sets up, verifies, and maintains links for dotfiles.
#: For each file listed in ${CONFIG_FILE}, this script will:
#:
#: 1. If the file does not exist, link it to the corresponding file in ${DOTFILE_DIR}.
#: 2. If the file exists and is not a link, move it to ${DOTFILE_DIR}
#:    and replace it with a symbolic link.
#: 3. If the file exists and is a link, make sure it's linked to the corresponding file
#:    in ${DOTFILE_DIR}.
#: 
#: This script is idempotent, so you can use it to
#: set up links for the first time on a new machine,
#: put additional files under dotfile management (add them to ${CONFIG_FILE} first),
#: or simply verify that existing links are correct.

DOTFILE_DIR=~/dotWombat
CONFIG_FILE=${DOTFILE_DIR}/config

function targetPath {
  echo ${DOTFILE_DIR}/$1
}

function moveAndLink {
  echo "Moving $1 to $2 and creating link"
  TARGET_DIR=$(dirname "$2")
  if [ -d "${TARGET_DIR}" ]; then
    : # Directory already exists, nothing to do
  else
    # echo "Creating directory ${TARGET_DIR}"
    mkdir -p ${TARGET_DIR}
  fi
  mv $1 $2
  ln -s $2 $1
}

function createLink {
  if [ -e $2 ]; then
    echo "Creating link from $1 to $2"
    ln -s $2 $1
  else
    echo "ERROR: $2 does not exist"
  fi
}

function verifyLink {
  if [ -e $2 ]; then
    TARGET=`readlink $1`
    if [ "${TARGET}" = "$2" ]; then
      echo "$1 is properly linked"
    else
      echo "ERROR: $1 links to ${TARGET} instead of $2"
    fi
  else
    echo "$1 is a symbolic link, but $2 does not exist"
  fi
}

function setupLink {
  if [ -e $1 ]; then
    if [ -h $1 ]; then
      verifyLink $1 $2
    else
      if [ -e $2 ]; then
        echo "ERROR: $2 exists, but $1 is not a symbolic link"
      else
        moveAndLink $1 $2
      fi
    fi
  else
    createLink $1 $2
  fi
}

while read DOTFILE
  do
    # echo "Processing ${DOTFILE}"
    LINK_NAME=~/${DOTFILE}
    TARGET=`targetPath ${DOTFILE}`
    setupLink ${LINK_NAME} ${TARGET}
  done < "${CONFIG_FILE}"
